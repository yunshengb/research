/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Sleep.h"

#include "Sleep.tcc"

#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace facebook { namespace windtunnel { namespace treadmill { namespace services { namespace sleep {

std::unique_ptr<apache::thrift::AsyncProcessor> SleepSvIf::getProcessor() {
  return folly::make_unique<SleepAsyncProcessor>(this);
}

int64_t SleepSvIf::goSleep(int64_t /*time*/) {
  throw apache::thrift::TApplicationException("Function goSleep is unimplemented");
}

folly::Future<int64_t> SleepSvIf::future_goSleep(int64_t time) {
  return apache::thrift::detail::si::future([&] { return goSleep(time); });
}

void SleepSvIf::async_tm_goSleep(std::unique_ptr<apache::thrift::HandlerCallback<int64_t>> callback, int64_t time) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_goSleep(time); });
}

int64_t SleepSvNull::goSleep(int64_t /*time*/) {
  return 0;
}

const char* SleepAsyncProcessor::getServiceName() {
  return "Sleep";
}

folly::Optional<std::string> SleepAsyncProcessor::getCacheKey(folly::IOBuf* buf, apache::thrift::protocol::PROTOCOL_TYPES protType) {
  return apache::thrift::detail::ap::get_cache_key(buf, protType, cacheKeyMap_);
}

void SleepAsyncProcessor::process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, std::move(req), std::move(buf), protType, context, eb, tm);
}

bool SleepAsyncProcessor::isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) {
  return apache::thrift::detail::ap::is_oneway_method(buf, header, onewayMethods_);
}

std::unordered_set<std::string> SleepAsyncProcessor::onewayMethods_ {};
std::unordered_map<std::string, int16_t> SleepAsyncProcessor::cacheKeyMap_ {};
const SleepAsyncProcessor::BinaryProtocolProcessMap& SleepAsyncProcessor::getBinaryProtocolProcessMap() {
  return binaryProcessMap_;
}

SleepAsyncProcessor::BinaryProtocolProcessMap SleepAsyncProcessor::binaryProcessMap_ {
  {"goSleep", &SleepAsyncProcessor::_processInThread_goSleep<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>}
};
const SleepAsyncProcessor::CompactProtocolProcessMap& SleepAsyncProcessor::getCompactProtocolProcessMap() {
  return compactProcessMap_;
}

SleepAsyncProcessor::CompactProtocolProcessMap SleepAsyncProcessor::compactProcessMap_ {
  {"goSleep", &SleepAsyncProcessor::_processInThread_goSleep<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>}
};

}}}}} // facebook::windtunnel::treadmill::services::sleep
namespace apache { namespace thrift {

}} // apache::thrift