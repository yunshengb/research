/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Sleep.h"

#include "Sleep.tcc"

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace facebook { namespace windtunnel { namespace treadmill { namespace services { namespace sleep {

const char* SleepAsyncClient::getServiceName() {
  return "Sleep";
}

void SleepAsyncClient::goSleep(std::unique_ptr<apache::thrift::RequestCallback> callback, int64_t time) {
  ::apache::thrift::RpcOptions rpcOptions;
  goSleep(rpcOptions, std::move(callback), time);
}

void SleepAsyncClient::goSleep(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int64_t time) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      goSleepT(&writer, rpcOptions, std::move(callback), time);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      goSleepT(&writer, rpcOptions, std::move(callback), time);
      break;
    }
    default:
    {
      throw apache::thrift::TApplicationException("Could not find Protocol");
    }
  }
}

int64_t SleepAsyncClient::sync_goSleep(int64_t time) {
  ::apache::thrift::RpcOptions rpcOptions;
  return sync_goSleep(rpcOptions, time);
}

int64_t SleepAsyncClient::sync_goSleep(apache::thrift::RpcOptions& rpcOptions, int64_t time) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback0 = folly::make_unique<apache::thrift::ClientSyncCallback>(&_returnState, getChannel()->getEventBase(), false);
  goSleep(rpcOptions, std::move(callback0), time);
  getChannel()->getEventBase()->loopForever();
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(_returnState.exception());
    std::rethrow_exception(_returnState.exception());
  }
  return recv_goSleep(_returnState);
}

folly::Future<int64_t> SleepAsyncClient::future_goSleep(int64_t time) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_goSleep(rpcOptions, time);
}

folly::Future<int64_t> SleepAsyncClient::future_goSleep(apache::thrift::RpcOptions& rpcOptions, int64_t time) {
  folly::Promise<int64_t> promise1;
  auto future2 = promise1.getFuture();
  auto callback3 = folly::make_unique<apache::thrift::FutureCallback<int64_t>>(std::move(promise1), recv_wrapped_goSleep, channel_);
  goSleep(rpcOptions, std::move(callback3), time);
  return future2;
}

folly::Future<std::pair<int64_t, std::unique_ptr<apache::thrift::transport::THeader>>> SleepAsyncClient::header_future_goSleep(apache::thrift::RpcOptions& rpcOptions, int64_t time) {
  folly::Promise<std::pair<int64_t, std::unique_ptr<apache::thrift::transport::THeader>>> promise4;
  auto future5 = promise4.getFuture();
  auto callback6 = folly::make_unique<apache::thrift::HeaderFutureCallback<int64_t>>(std::move(promise4), recv_wrapped_goSleep, channel_);
  goSleep(rpcOptions, std::move(callback6), time);
  return future5;
}

void SleepAsyncClient::goSleep(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, int64_t time) {
  goSleep(folly::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)),time);
}

folly::exception_wrapper SleepAsyncClient::recv_wrapped_goSleep(int64_t& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = state.exceptionWrapper();
  if (ew) {
    return ew;
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }
  switch(state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return recv_wrapped_goSleepT(&reader, _return, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return recv_wrapped_goSleepT(&reader, _return, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

int64_t SleepAsyncClient::recv_goSleep(::apache::thrift::ClientReceiveState& state) {
  int64_t _return;
  auto ew = recv_wrapped_goSleep(_return, state);
  if (ew) {
    ew.throwException();
  }
  return _return;
}

int64_t SleepAsyncClient::recv_instance_goSleep(::apache::thrift::ClientReceiveState& state) {
  return recv_goSleep(state);
}

folly::exception_wrapper SleepAsyncClient::recv_instance_wrapped_goSleep(int64_t& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_goSleep(_return, state);
}

}}}}} // facebook::windtunnel::treadmill::services::sleep
namespace apache { namespace thrift {

}} // apache::thrift