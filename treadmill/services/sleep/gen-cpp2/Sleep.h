/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/ServiceIncludes.h>
#include <thrift/lib/cpp2/async/HeaderChannel.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp2/async/FutureRequest.h>
#include <folly/futures/Future.h>
#include "sleep_types.h"



namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace facebook { namespace windtunnel { namespace treadmill { namespace services { namespace sleep {

class SleepSvAsyncIf {
 public:
  virtual ~SleepSvAsyncIf() {}
  virtual void async_tm_goSleep(std::unique_ptr<apache::thrift::HandlerCallback<int64_t>> callback, int64_t time) = 0;
  virtual void async_goSleep(std::unique_ptr<apache::thrift::HandlerCallback<int64_t>> callback, int64_t time) = delete;
  virtual folly::Future<int64_t> future_goSleep(int64_t time) = 0;
};

class SleepAsyncProcessor;

class SleepSvIf : public SleepSvAsyncIf, public apache::thrift::ServerInterface {
 public:
  typedef SleepAsyncProcessor ProcessorType;

  virtual ~SleepSvIf() {}
  virtual std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor();
  virtual int64_t goSleep(int64_t /*time*/);
  folly::Future<int64_t> future_goSleep(int64_t time);
  virtual void async_tm_goSleep(std::unique_ptr<apache::thrift::HandlerCallback<int64_t>> callback, int64_t time);
};

class SleepSvNull : public SleepSvIf {
 public:
  virtual ~SleepSvNull() {}
  virtual int64_t goSleep(int64_t /*time*/);
};

class SleepAsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessor {
 public:
  virtual const char* getServiceName();
  using BaseAsyncProcessor = void;
 protected:
  SleepSvIf* iface_;
  virtual folly::Optional<std::string> getCacheKey(folly::IOBuf* buf, apache::thrift::protocol::PROTOCOL_TYPES protType);
 public:
  virtual void process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
 protected:
  virtual bool isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header);
 private:
  static std::unordered_set<std::string> onewayMethods_;
  static std::unordered_map<std::string, int16_t> cacheKeyMap_;
 public:
  using BinaryProtocolProcessFunc = ProcessFunc<SleepAsyncProcessor, apache::thrift::BinaryProtocolReader>;
  using BinaryProtocolProcessMap = ProcessMap<BinaryProtocolProcessFunc>;
  static const SleepAsyncProcessor::BinaryProtocolProcessMap& getBinaryProtocolProcessMap();
 private:
  static SleepAsyncProcessor::BinaryProtocolProcessMap binaryProcessMap_;
 public:
  using CompactProtocolProcessFunc = ProcessFunc<SleepAsyncProcessor, apache::thrift::CompactProtocolReader>;
  using CompactProtocolProcessMap = ProcessMap<CompactProtocolProcessFunc>;
  static const SleepAsyncProcessor::CompactProtocolProcessMap& getCompactProtocolProcessMap();
 private:
  static SleepAsyncProcessor::CompactProtocolProcessMap compactProcessMap_;
 private:
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_goSleep(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_goSleep(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_goSleep(int32_t protoSeqId, apache::thrift::ContextStack* ctx, int64_t const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_goSleep(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_goSleep(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
 public:
  SleepAsyncProcessor(SleepSvIf* iface) :
      iface_(iface) {}

  virtual ~SleepAsyncProcessor() {}
};

class SleepAsyncClient : public apache::thrift::TClientBase {
 public:
  virtual const char* getServiceName();
  typedef std::unique_ptr<apache::thrift::RequestChannel, folly::DelayedDestruction::Destructor> channel_ptr;

  virtual ~SleepAsyncClient() {}

  SleepAsyncClient(std::shared_ptr<apache::thrift::RequestChannel> channel) :
      channel_(channel) {
    connectionContext_.reset(new apache::thrift::Cpp2ConnContext);
  }

  apache::thrift::RequestChannel*  getChannel() {
    return this->channel_.get();
  }

  apache::thrift::HeaderChannel*  getHeaderChannel() {
    return dynamic_cast<apache::thrift::HeaderChannel*>(this->channel_.get());
  }
  virtual void goSleep(std::unique_ptr<apache::thrift::RequestCallback> callback, int64_t time);
  virtual void goSleep(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int64_t time);
  virtual int64_t sync_goSleep(int64_t time);
  virtual int64_t sync_goSleep(apache::thrift::RpcOptions& rpcOptions, int64_t time);
  virtual folly::Future<int64_t> future_goSleep(int64_t time);
  virtual folly::Future<int64_t> future_goSleep(apache::thrift::RpcOptions& rpcOptions, int64_t time);
  virtual folly::Future<std::pair<int64_t, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_goSleep(apache::thrift::RpcOptions& rpcOptions, int64_t time);
  virtual void goSleep(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, int64_t time);
  static folly::exception_wrapper recv_wrapped_goSleep(int64_t& _return, ::apache::thrift::ClientReceiveState& state);
  static int64_t recv_goSleep(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual int64_t recv_instance_goSleep(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_goSleep(int64_t& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void goSleepT(Protocol_* prot, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int64_t time);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_goSleepT(Protocol_* prot, int64_t& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static int64_t recv_goSleepT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state);
 protected:
  std::unique_ptr<apache::thrift::Cpp2ConnContext> connectionContext_;
  std::shared_ptr<apache::thrift::RequestChannel> channel_;
};

}}}}} // facebook::windtunnel::treadmill::services::sleep
namespace apache { namespace thrift {

}} // apache::thrift